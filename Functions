#DECLARATION OF A FUNCTION
functions.html

#HOISTING 
occurs incase of declaration syntax, hoisting occurs but in case of expression syntax, hoisting doesn't occur.

#PASSING ARGUMENTS
parameter.html
Multiple arguments can be passed to a function irrespective of the parameter list.
All arguments are stored in a variable called argument.

#FUNCTION OVERLOADING
funcOverloading.html
not directly supported in JS

#THIS OBJ
thisObj.html

#CALL
function displayDetails()
{
  document.write(this.id+"<br/>");
  document.write(this.name+"<br/>");
}
var student1={
            id:1,
            name:"john"
        };
var student2={
            id:2,
            name:"bob"
        };
this.id=3;
this.name="Mary";
displayDetails.call(student1);
displayDetails.call(student2);
displayDetails.call();

-> 1
  john
  2
  bob
  3
  Mary

#APPLY
takes an array of parameters unlike call which takes one at a time
function displayDetails(testScore,testScore2)
{
  document.write(this.id+"<br/>");
  document.write(this.name+"<br/>");
  document.write(testScore+"<br/>");
  document.write(testScore2+"<br/>");
}
var student1={
            id:1,
            name:"john"
        };
var student2={
            id:2,
            name:"bob"
        };
this.id=3;
this.name="Mary";
displayDetails.apply(student1,[10,20]);
displayDetails.apply(student2,[20,30]);
displayDetails.apply(this,[30,15]);

output->1
john
10
20
2
bob
20
30
3
Mary
30
15

#BIND
binds function call to a particular object
function displayDetails(testScore)
{
  document.write(this.id+"<br/>");
  document.write(this.name+"<br/>");
  document.write(testScore+"<br/>");
}
var student1={
            id:1,
            name:"john"
        };
var student2={
            id:2,
            name:"bob"
        };
this.id=3;
this.name="Mary";
var displayForStudent1=displayDetails.bind(student1);
displayForStudent1(10);
//all calls have 20 as testScore
var displayForStudent2=displayDetails.bind(student2,20);
displayForStudent2();
output->1
john
10
2
bob
20
